# -*- coding: utf-8 -*-
"""ARIMA-AirPassengers.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1X7Eoi2_FmlFWmVlqezc2eWoXFRvHpZMq

##Importing necessary libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sn

"""##Loading the dataframe"""

df= pd.read_csv("AirPassengers.csv")
df

# @title #Passengers

from matplotlib import pyplot as plt
df['#Passengers'].plot(kind='line', figsize=(8, 4), title='#Passengers')
plt.gca().spines[['top', 'right']].set_visible(False)

df.columns

df["Month"]= pd.to_datetime(df["Month"])
df

# @title #Passengers

from matplotlib import pyplot as plt
df['#Passengers'].plot(kind='hist', bins=20, title='#Passengers')
plt.gca().spines[['top', 'right',]].set_visible(False)

df.columns

df.dtypes

df.set_index("Month",inplace=True)
df

plt.plot(df['#Passengers'])

"""###After running this code, you can examine the adf, pvalue, and other variables to determine whether the time series df is stationary or not. A small p-value and a test statistic significantly smaller than the critical values indicate that the time series is likely stationary."""

from statsmodels.tsa.stattools import adfuller
adf,pvalue,usedlag_, nobs_, critical_values, icbest_ = adfuller(df)

print(pvalue) #if pvalue > 0.05 then data is not stationary

"""###Adding a new column named "year" to the DataFrame df, containing the year values extracted from the index. This can be useful for time series analysis, where you may want to analyze data based on the year component.





"""

df["year"]= [d.year for d in df.index]
df

# @title year vs #Passengers

from matplotlib import pyplot as plt
import seaborn as sns
def _plot_series(series, series_name, series_index=0):
  from matplotlib import pyplot as plt
  import seaborn as sns
  palette = list(sns.palettes.mpl_palette('Dark2'))
  xs = series['year']
  ys = series['#Passengers']

  plt.plot(xs, ys, label=series_name, color=palette[series_index % len(palette)])

fig, ax = plt.subplots(figsize=(10, 5.2), layout='constrained')
df_sorted = df.sort_values('year', ascending=True)
_plot_series(df_sorted, '')
sns.despine(fig=fig, ax=ax)
plt.xlabel('year')
_ = plt.ylabel('#Passengers')

"""### Adding a new column named "month" to the DataFrame df, containing the month abbreviations extracted from the index. This can be useful for analyzing data based on the month component, such as seasonal patterns or monthly trends."""

df["month"]= [d.strftime('%b') for d in df.index]
df

years= df['year'].unique()
years

sns.boxplot(x='year',y='#Passengers',data=df)

sn.boxplot(x='month', y='#Passengers', data=df)

"""###After executing this code, the variable decompose will contain the results of the seasonal decomposition, including the trend, seasonal, and residual components"""

from statsmodels.tsa.seasonal import seasonal_decompose
decompose= seasonal_decompose(df['#Passengers'],
                              model='additive'
                              )

trend= decompose.trend
seasonal=decompose.seasonal
residual=decompose.resid

trend

seasonal

residual

plt.figure(figsize=(12,8))
plt.subplot(411)
plt.plot(df["#Passengers"],label="Orginal",color='red')
plt.legend(loc='upper left')
plt.subplot(412)
plt.plot(trend,label="Trend",color='red')
plt.legend(loc='upper left')
plt.subplot(413)
plt.plot(seasonal,label="sesonal",color='red')
plt.legend(loc='upper left')
plt.subplot(414)
plt.plot(residual,label="Residual",color='red')
plt.legend(loc='upper left')
plt.show()

!pip install pmdarima
from pmdarima.arima import auto_arima

"""###After executing this code, the arima_model variable will contain the best-fitting ARIMA model selected by the auto_arima function. This model can then be used for forecasting or further analysis of the time series data."""

arima_model=auto_arima(df["#Passengers"], start_p=1, d=1, q=1,
                       max_p=5, max_d=5, max_q=5, m=12,
                       start_P=0, D=1, start_Q=0, max_P=5, max_D=5, max_Q=5,
                       seasonal=True,
                       trace=True,
                       error_action='ignore',
                       supress_warning=True,
                       stepwise=True, n_fits=50)

arima_model.summary()

"""###The code, x_train will contain the training set data, and x_test will contain the test set data."""

size=int(len(df)*.66)
x_train, x_test=df[0:size], df[size:len(df)]

x_train.shape

x_test.shape

from statsmodels.tsa.statespace.sarimax import SARIMAX

"""###The code, you'll get a summary of the SARIMAX model, which can be used to interpret the results and assess the model's goodness of fit. This summary provides valuable insights into the model's performance and can help in making informed decisions about forecasting."""

model=SARIMAX(x_train["#Passengers"],
             order=(0,1,1),
             seasonal_order=(2,1,1,12))
result=model.fit()
result.summary()

start_index=0
end_index=len(x_train)-1
train_prediction=result.predict(start_index, end_index)
train_prediction

st_index=len(x_train)
ed_index=len(df)-1
predction=result.predict(st_index,ed_index)
predction

predction.plot(legend=True)
x_test['#Passengers'].plot(legend=True)

import math
from sklearn.metrics import mean_squared_error

"""###After executing this code, you'll get the RMSE values for both the training and test sets, which can be used to evaluate the performance of your model. Lower RMSE values indicate better model performance."""

trainScore=math.sqrt(mean_squared_error(x_train['#Passengers'],train_prediction))
testScore=math.sqrt(mean_squared_error(x_test["#Passengers"],predction))
trainScore,testScore

forcast=result.predict(start=len(df),
                      end=(len(df)-1)+3*12,
                      typ="levels").rename('Forecust')

plt.figure(figsize=(12,8))
plt.plot(x_train["#Passengers"],label="Training",color='green')
plt.plot(x_test["#Passengers"],label="Test",color='blue')
plt.plot(forcast,label="Forecast",color="red")
plt.legend(loc="upper left")

